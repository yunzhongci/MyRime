# Rime schema settings
# encoding: utf-8

schema:
  schema_id: xhup
  name: 小鹤音形
  version: "v10.9v"
  author:
    - 方案设计：何海峰 <flypy@qq.com>
    - 方案调整：水猫 <kchen0x@gmail.com>
    - 来自凇鹤拼音
  description: |
    小鹤音形主码表
  dependencies:
    - xhup_reverse

# 使用雾凇默认的标点符号
punctuator:
  import_preset: default

switches:
  - name: ascii_mode
    reset: 0
    states: [ 中文, 英文 ]
  - name: emoji_suggestion
    states: [ "😣️","😁️"]
    reset: 1
  - name: full_shape
    states: [ 半角, 全角 ]
    reset: 0
  - name: transcription
    states: [ 简体 , 繁体 ]
    reset: 0
  - name: ascii_punct
    states: [ "。，", "．，" ]
    reset: 0
  - name: chaifen        # 拆字滤镜
    states: [ 🙈, 🐵 ]     # 快捷键 「Control+Shift+C」
    reset: 0


engine:
  processors:
    - lua_processor@*xhup/shortcut_processor
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - fallback_segmentor
  translators:
    - punct_translator
    - table_translator                          # 码表
    - lua_translator@*mint_date_time_translator          # 时间、日期、星期、月份
    - lua_translator@*number_translator                  # 金额大小写
    - lua_translator@*chineseLunarCalendar_translator    # 农历
    - lua_translator@*xhup/shortcut_translator  # Lua 直通车
    - reverse_lookup_translator@xhup_reverse
    - history_translator@history                # 重复上屏
  filters:
    - simplifier
    - simplifier@simplification
    - simplifier@short_hints #滤镜
    - uniquifier

# 拼写设定
speller:
  alphabet: "abcdefghijklmnopqrstuvwxyz;'"    # 不直接上屏的标点
  initials: ';abcdefghijklmnopqrstuvwxyz'     # 可以作为第一位的引导词
  finals: "'"
  # delimiter: " '"
  max_code_length: 4
  auto_select: true   #顶字上屏
  auto_select_pattern: ^;.$|^\w{4}$
  auto_clear: max_length #manual|auto|max_length 空码按下一键确认清屏|空码自动清|达到最长码时后码顶上清屏

# 翻译器，小鹤音形
translator:
  dictionary: xhup                # 挂载词库 xhup.dict.yaml
  enable_charset_filter: false
  enable_sentence: false          # 是否启用造句模式
  enable_completion: false        # 编码提示开关
  enable_user_dict: false
  disable_user_dict_for_patterns:
    - "^z.*$"

# 重复上屏
history:
   input: ;f
   size: 1              # 重复前几次上屏
   initial_quality: 1   # 首选

# 简繁转换器
simplification:
  opencc_config: s2tw.json      # s2t.json | s2hk.json | s2tw.json | s2twp.json
  option_name: simplification
  tips: all                     # 转换提示: all 都显示 | char 仅单字显示 | none 不显示。

short_hints:
  opencc_config: short_hints.json
  option_name: short_hints
  show_in_comment: true #作为注解在后面显示
  comment_format:
   - xform/^/〔/
   - xform/$/〕/
  tips: all
  # tags:
  #   - abc
  #   - tiger
  #   - tigress
  #   - xhup
    # - reverse_lookup

# 反查词库
xhup_reverse:
  dictionary: xhup_reverse
  comment_format:
   # - xform/^/〔/
   # - xform/$/〕/
    - xform/ / /

# 快捷键设置
key_binder:
  import_preset: default  # 从 default.yaml 继承通用的
  bindings:               # 一些专用的快捷键
    - {accept: bracketleft, send: bracketleft, when: paging}        # 注销[上翻页
    - {accept: bracketright, send: bracketright, when: has_menu}    # 注销]下翻页
    - {accept: comma, send: comma, when: paging}                    # 注销逗号翻页
    - {accept: period, send: period, when: has_menu}                # 注销句号翻页
    - {accept: semicolon, send: '2', when: has_menu}                # 分号次选
  #  - {accept: Release+semicolon, send: semicolon, when: has_menu} # 如启用此行，则分号引导符号功能无效
    - {accept: Release+period, send: period, when: composing}       # 句号顶屏
    - {accept: Release+comma, send: comma, when: composing}         # 逗号顶屏
    - {accept: "Tab", send: Escape, when: composing}                # 注销 Tab 键（default 可以通过 Tab 来切换光标至下一个拼音）
    - {accept: "Shift_R", send: Escape, when: composing}            # 注销右侧 Shift 键，用来进行输入法切换中英（配合 Karabiner）
    - {accept: "Shift+space", toggle: full_shape, when: always}     # 切换全半角
    - {accept: "Control+period", toggle: ascii_punct, when: always} # 切换中英标点
    - {accept: "Control+j", toggle: simplification, when: always}   # 切换简繁

# 识别器

recognizer:
  import_preset: default
  patterns:
    url: "^[a-z]+[.].+$"
    punct: "^/([0-9]0?|[a-zA-Z]+)$"
    wubi98_mint: "Uw[a-z]*'?$"
    stroke: "Ui[a-z]*'?$"
    radical_lookup: "Uu[a-z]*'?$"
    rmb: "^R[0-9]+[.]?[0-9]*"        # 响应 lua_translator@number_translator 脚本将自动获取第 2 个字符作为触发前缀
    gregorian_to_lunar: "^N[0-9]{1,8}"  # 响应 lua_translator@Chinese_lunar_calendar 公历转农历，输入 N20240115 得到「二〇二四年腊月初五」，脚本将自动获取第 2 个字符作为触发前缀
    uppercase: ""  # 覆写默认的 uppercase 使其可以在输入大写后，输入数字
key_binder:
  import_preset: default
  bindings:
    - {accept: "Control+Shift+E", toggle: emoji_suggestion, when: always}
    - {accept: "Control+Shift+exclam", toggle: transcription, when: has_menu}
    - {accept: "Control+Shift+1", toggle: transcription, when: has_menu}
    - {accept: "Control+Shift+C", toggle: chaifen, when: has_menu} # 拆字滤镜开关
    - {accept: minus, send: Page_Up, when: paging}     # 使用`-`进行向上翻页（第一页时候无效）
    - {accept: equal, send: Page_Down, when: has_menu} # 使用`=`进行向下翻页
    # Emacs 风格的快捷键
    - { when: composing, accept: Control+p, send: Up }     # composing 时,Control+p 等同于 Up 键
    - { when: composing, accept: Control+n, send: Down }
    - { when: composing, accept: Control+b, send: Left }
    - { when: composing, accept: Control+f, send: Right }
    - { when: composing, accept: Control+a, send: Home }
    - { when: composing, accept: Control+e, send: End }
    - { when: composing, accept: Control+d, send: Delete }
    - { when: composing, accept: Control+k, send: Shift+Delete } # 删除到行尾
    - { when: composing, accept: Control+g, send: Escape }       # 退出编码
    - { when: composing, accept: Alt+v, send: Page_Up }          # 翻页
    - { when: composing, accept: Control+v, send: Page_Down }
    # 按词移动光标
    - { when: composing, accept: ISO_Left_Tab, send: Shift+Left } # ISO_Left_Tab 是 Shift+Tab
    - { when: composing, accept: Shift+Tab, send: Shift+Left }
    - { when: composing, accept: Tab, send: Shift+Right }
    # 翻页
    - { when: paging, accept: minus, send: Page_Up }             # 编码窗口翻页
    - { when: has_menu, accept: equal, send: Page_Down }
    - { when: paging, accept: comma, send: Page_Up }             # 候选窗口翻页
    - { when: has_menu, accept: period, send: Page_Down }
    - { when: predicting, accept: comma, send: comma }           # 在预编码模式下,不当作快捷键
    - { when: predicting, accept: period, send: period }
    # 切换状态
    - { when: always, accept: Control+Shift+1, select: .next }   # 切换输入方案
    - { when: always, accept: Control+Shift+2, toggle: ascii_mode } # 切换中/西文模式
    - { when: always, accept: Control+Shift+3, toggle: full_shape } # 切换全角/半角
    - { when: always, accept: Control+Shift+4, toggle: transcription } # 切换简体/繁体
    - { when: always, accept: Control+Shift+5, toggle: extended_charset } # 切换扩展字符
    - { when: always, accept: Shift+space, toggle: full_shape } # 另一种切换全角/半角的方式
    - { when: always, accept: Control+period, toggle: ascii_punct } # 切换中/西文标点

menu:
  page_size: 6      # 候选项数



